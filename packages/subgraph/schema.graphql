type Steward @entity {
  "{ user address} "
  id: String!
  " Number of actions performed "
  actions: Int
  " NFT's minted to steward"
  nft: [ProvableNFT!]! @derivedFrom(field: "steward")
  " Collectives the steward is apart of "
  collective: [DirectPaymentPool!]! @derivedFrom(field: "steward")
}

type Donor @entity {
  "{ user address} "
  id: String!
  " Date the user became a donor "
  joined: Int!
  " Total amount donated "
  totalDonated: BigInt
}

type DirectPaymentPool @entity {
  "This is the address source"
  id: String!
  ipfs: String!
  nftType: BigInt!
  validEvents: [Int!]!
  rewardPerEvent: [Int!]!
  manager: Bytes!
  membersValidator: Bytes!
  uniquenessValidator: String
  collective: Donor
  steward: Steward
  rewardToken: String!
  projectId: String!
  isVerified: Boolean!
  limits: SafetyLimits!
  nft: ProvableNFT!
  claimedNfts: [String!]!
  members: [String!]!
  poolAddress: String!
  timestamp: Int!
}

type PoolSettings @entity {
  id: String!
  nftType: BigInt!
  validEvents: [Int!]!
  rewardPerEvent: [Int!]!
  manager: Bytes!
  membersValidator: Bytes!
  uniquenessValidator: Bytes!
  rewardToken: Bytes!
}

type SafetyLimits @entity {
  id: String!
  maxTotalPerMonth: BigInt!
  maxMemberPerMonth: BigInt!
  maxMemberPerDay: BigInt!
}

type ProvableNFT @entity {
  id: ID!
  owner: String!
  hash: String!
  steward: Steward
}

type EventData @entity {
  id: String!
  eventType: Int!
  eventTimestamp: BigInt!
  quantity: BigInt!
  eventUri: String!
  eventQuantity: BigInt!
  rewardPerContributer: BigInt!
  contributors: [Bytes!]!
  claim: Claim
}

type Claim @entity {
  id: String!
  totalRewards: BigInt!
  events: [EventData!] @derivedFrom(field: "claim")
}

type Donor @entity {
  id: String! # The address of the donor
  timestamp: Int!
  totalDonated: BigInt!
  collectives: [DonorCollective!]! @derivedFrom(field: "donor")
}

"""
Represents the relationship between a Donor and a Collective
"""
type DonorCollective @entity {
  id: String! # donorAddress + " " + collectiveAddress
  donor: Donor!
  collective: Collective!
  contribution: BigInt! # total contribution of the donor to the collective
  flowRate: BigInt!
  timestamp: Int!
  events: [SupportEvent!]! @derivedFrom(field: "donorCollective")
}

type SupportEvent @entity {
  id: String! # tx hash
  networkFee: BigInt # gas price * gas used
  donor: Donor!
  collective: Collective!
  donorCollective: DonorCollective!
  contribution: BigInt!
  previousContribution: BigInt!
  isFlowUpdate: Boolean!
  flowRate: BigInt!
  previousFlowRate: BigInt!
  timestamp: Int!
}

type Steward @entity {
  """
  { user address}
  """
  id: String!
  """
  Number of actions performed
  """
  actions: Int!
  totalEarned: BigInt!
  """
  NFT's minted to steward
  """
  nfts: [ProvableNFT!]!
  """
  Collectives the steward is apart of
  """
  collectives: [StewardCollective!]! @derivedFrom(field: "steward")
}

"""
Represents the relationship between a Steward and a Collective
"""
type StewardCollective @entity {
  id: String! # stewardAddress + " " + collectiveAddress
  steward: Steward!
  collective: Collective!
  actions: Int!
  totalEarned: BigInt!
}

type Collective @entity {
  id: String! # pool address
  ipfs: IpfsCollective!
  settings: PoolSettings!
  limits: SafetyLimits!
  donors: [DonorCollective!] @derivedFrom(field: "collective")
  stewards: [StewardCollective!] @derivedFrom(field: "collective")
  projectId: String!
  isVerified: Boolean!
  poolFactory: String! # pool factory (event source)
  timestamp: Int!
  paymentsMade: Int!
  totalDonations: BigInt!
  totalRewards: BigInt!
  claims: [Claim!]! @derivedFrom(field: "collective")
}

type IpfsCollective @entity {
  id: String! # ipfs hash
  name: String!
  description: String!
  email: String
  website: String
  twitter: String
  instagram: String
  threads: String
  infoLabel: String
  headerImage: String!
  logo: String!
  images: [String!]
}

type PoolSettings @entity {
  id: String! # collective address
  nftType: BigInt!
  manager: Bytes!
  membersValidator: Bytes!
  uniquenessValidator: Bytes!
  rewardToken: Bytes!
}

type SafetyLimits @entity {
  id: String! # collective address
  maxTotalPerMonth: BigInt!
  maxMemberPerMonth: BigInt!
  maxMemberPerDay: BigInt!
}

type ProvableNFT @entity {
  id: ID!
  owner: String!
  hash: String!
  steward: [Steward!]! @derivedFrom(field: "nfts")
  collective: Collective # This is always populated, but not by the same handler that creates the ProvableNFT
}

type ClaimEvent @entity {
  id: String! # event uri
  eventType: Int!
  timestamp: Int!
  quantity: BigInt!
  rewardPerContributor: BigInt!
  contributors: [Steward!]!
  nft: ProvableNFT!
  claim: Claim!
}

type Claim @entity {
  id: String!
  collective: Collective!
  txHash: String!
  networkFee: BigInt # gas price * gas used
  totalRewards: BigInt!
  events: [ClaimEvent!]! @derivedFrom(field: "claim")
  timestamp: Int!
}

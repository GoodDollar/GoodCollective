type Donor @entity {
  id: String! # The address of the donor
  joined: BigInt!
  totalDonated: BigInt!
  collectives: [DonorCollective!]!
}

"""Represents the relationship between a Donor and a Collective"""
type DonorCollective @entity {
  id: String! # donorAddress + " " + collectiveAddress
  donor: Donor! @derivedFrom(field: "collectives")
  collective: Collective! @derivedFrom(field: "donors")
  contribution: BigInt! # This is the total contribution of the donor to the collective
  flowRate: BigInt!
}

type Steward @entity {
  """{ user address}"""
  id: String!
  """Number of actions performed"""
  actions: Int!
  totalEarned: BigInt!
  """NFT's minted to steward"""
  nfts: [ProvableNFT!]!
  """Collectives the steward is apart of"""
  collectives: [StewardCollective!]!
}

"""Represents the relationship between a Steward and a Collective"""
type StewardCollective @entity {
  id: String! # stewardAddress + " " + collectiveAddress
  steward: Steward! @derivedFrom(field: "collectives")
  collective: Collective! @derivedFrom(field: "stewards")
  actions: Int!
  totalEarned: BigInt!
}

type Collective @entity {
  id: String! # pool address
  ipfs: String!
  settings: PoolSettings!
  limits: SafetyLimits!
  donors: [DonorCollective!]!
  stewards: [StewardCollective!]!
  projectId: String!
  isVerified: Boolean!
  poolFactory: String! # pool factory (event source)
  timestamp: BigInt!
  paymentsMade: Int!
  totalDonations: BigInt!
  totalRewards: BigInt!
}

type IpfsCollective @entity {
  id: String! # collective address
  name: String!
  description: String!
  email: String
  website: String
  twitter: String
  instagram: String
  threads: String
  headerImage: String
  logo: String
  images: [String!]
}

type PoolSettings @entity {
  id: String! # collective address
  nftType: BigInt!
  manager: Bytes!
  membersValidator: Bytes!
  uniquenessValidator: Bytes!
  rewardToken: Bytes!
}

type SafetyLimits @entity {
  id: String! # collective address
  maxTotalPerMonth: BigInt!
  maxMemberPerMonth: BigInt!
  maxMemberPerDay: BigInt!
}

type ProvableNFT @entity {
  id: ID!
  owner: String!
  hash: String!
  steward: [Steward!]! @derivedFrom(field: "nfts")
  collective: Collective!
}

type EventData @entity {
  id: String! # event uri
  eventType: Int!
  timestamp: BigInt!
  quantity: BigInt!
  rewardPerContributor: BigInt!
  contributors: [Steward!]!
  nft: ProvableNFT!
  claim: Claim! @derivedFrom(field: "events")
}

type Claim @entity {
  id: String!
  totalRewards: BigInt!
  events: [EventData!]!
}

type Steward @entity {
  "{ user address} "
  id: String!
  " Number of actions performed "
  actions: Int
  " NFT's minted to steward"
  nft: [ProvableNFT!]! @derivedFrom(field: "steward")
  " Collectives the steward is apart of "
  collective: [Collective!]! @derivedFrom(field: "steward")
}

type Donor @entity {
  id: String! # This will be the contract address from which the transaction originated
  supporter: Bytes! # Address of the supporter
  joined: Int!
  totalDonated: BigInt!
  previousContribution: BigInt
  contribution: BigInt
  previousFlowRate: BigInt
  flowRate: BigInt
  isFlowUpdate: Boolean
  collective: Bytes!
  pool: [Collective!]! @derivedFrom(field: "donor")
}

type Collective @entity {
  "This is the address source"
  id: String!
  ipfs: String
  nftType: BigInt
  manager: Bytes
  contributions: BigInt!
  membersValidator: Bytes
  uniquenessValidator: String
  donor: Donor
  steward: Steward
  rewardToken: String
  projectId: String
  isVerified: Boolean
  limits: SafetyLimits
  nft: ProvableNFT
  poolAddress: String
  timestamp: Int
}

type PoolSettings @entity {
  id: String!
  nftType: BigInt!
  manager: Bytes!
  membersValidator: Bytes!
  uniquenessValidator: Bytes!
  rewardToken: Bytes!
}

type SafetyLimits @entity {
  id: String!
  maxTotalPerMonth: BigInt
  maxMemberPerMonth: BigInt
  maxMemberPerDay: BigInt
}

type ProvableNFT @entity {
  id: ID!
  owner: String!
  hash: String!
  steward: Steward
}

type EventData @entity {
  id: String!
  eventType: Int!
  eventTimestamp: BigInt!
  quantity: BigInt!
  eventUri: String!
  eventQuantity: BigInt!
  rewardPerContributor: BigInt!
  contributors: [Bytes!]!
  claim: Claim
}

type Claim @entity {
  id: String!
  totalRewards: BigInt!
  events: [EventData!] @derivedFrom(field: "claim")
}

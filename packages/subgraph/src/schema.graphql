type DirectPaymentPool @entity {
  id: String!
  ipfs: String!
  nftType: Int!
  validEvents: [Int!]!
  rewardPerEvent: [Int!]!
  manager: String!
  membersValidator: String!
  uniquenessValidator: String
  rewardToken: String!
  projectId: String!
  isVerified: Boolean!
  limits: SafetyLimits!
  nft: ProvableNFT!
  claimedNfts: [String!]!
  members: [String!]!
}

type PoolSettings @entity {
  id: String!
  nftType: Int!
  validEvents: [Int!]!
  rewardPerEvent: [Int!]!
  manager: String!
  membersValidator: String
  uniquenessValidator: String
  rewardToken: String!
}

type SafetyLimits @entity {
  id: String!
  maxTotalPerMonth: Int!
  maxMemberPerMonth: Int!
  maxMemberPerDay: Int!
}

type ProvableNFT @entity {
  id: ID!
  owner: Address!
  hash: String!
  nftType: Int!
  version: Int!
  nftUri: String!
  events: [EventData!]!
}

type EventData @entity {
  subtype: Int!
  timestamp: Int!
  quantity: Int!
  eventUri: String!
  contributors: [String!]!
}

type Claim @entity {

}

#  event EventRewardClaimed(uint256 indexed tokenId, ProvableNFT.EventData eventData, uint256 rewardPerContributer);
#  event NFTClaimed(uint256 indexed tokenId, uint256 totalRewards, ProvableNFT.NFTData nftData);

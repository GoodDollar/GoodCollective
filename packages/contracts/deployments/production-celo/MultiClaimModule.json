{
  "address": "0xE6Af17143015aAA030c8aCd81811e72AC6046c0e",
  "abi": [
    {
      "inputs": [],
      "name": "getModuleTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeID",
          "type": "uint256"
        }
      ],
      "name": "isModuleType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "multiClaim",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "success",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onInstall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onUninstall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3d4cf9d3cfbeeeed7e0c40b243ece26f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getModuleTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeID\",\"type\":\"uint256\"}],\"name\":\"isModuleType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"multiClaim\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"success\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onInstall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onUninstall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getModuleTypes()\":{\"details\":\"Returns bit-encoded integer of the different typeIds of the module MUST return all the bit-encoded typeIds of the module\"},\"isModuleType(uint256)\":{\"details\":\"Returns boolean value if module is a certain type\",\"params\":{\"typeID\":\"the module type ID according the ERC-7579 spec MUST return true if the module is of the given type and false otherwise\"}},\"onInstall(bytes)\":{\"details\":\"This function is called by the smart account during installation of the module\",\"params\":{\"data\":\"arbitrary data that may be required on the module during `onInstall` initialization MUST revert on error (i.e. if module is already enabled)\"}},\"onUninstall(bytes)\":{\"details\":\"This function is called by the smart account during uninstallation of the module\",\"params\":{\"data\":\"arbitrary data that may be required on the module during `onUninstall` de-initialization MUST revert on error\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UBI/MultiClaimModule.sol\":\"MultiClaimModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"contracts/UBI/MultiClaimModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n// Interface for ERC-7579 IModule (minimal implementation)\\ninterface IModule {\\n    /**\\n     * @dev This function is called by the smart account during installation of the module\\n     * @param data arbitrary data that may be required on the module during `onInstall` initialization\\n     *\\n     * MUST revert on error (i.e. if module is already enabled)\\n     */\\n    function onInstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev This function is called by the smart account during uninstallation of the module\\n     * @param data arbitrary data that may be required on the module during `onUninstall` de-initialization\\n     *\\n     * MUST revert on error\\n     */\\n    function onUninstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns boolean value if module is a certain type\\n     * @param typeID the module type ID according the ERC-7579 spec\\n     *\\n     * MUST return true if the module is of the given type and false otherwise\\n     */\\n    function isModuleType(uint256 typeID) external view returns (bool);\\n\\n    /**\\n     * @dev Returns bit-encoded integer of the different typeIds of the module\\n     *\\n     * MUST return all the bit-encoded typeIds of the module\\n     */\\n    function getModuleTypes() external view returns (uint256);\\n}\\n\\ninterface IClaimable {\\n    function claim() external;\\n}\\n\\ncontract MultiClaimModule is IModule {\\n    // Function to claim tokens from multiple contracts\\n    function multiClaim(\\n        address[] calldata contracts,\\n        IERC20Upgradeable token,\\n        address recipient\\n    ) external returns (bool[] memory success) {\\n        // Loop through each contract address\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        success = new bool[](contracts.length);\\n        for (uint i = 0; i < contracts.length; i++) {\\n            try IClaimable(contracts[i]).claim() {\\n                success[i] = true;\\n            } catch {}\\n        }\\n\\n        // Transfer any token balance after claims to recipient\\n        uint256 tokenBalanceDiff = token.balanceOf(address(this)) - tokenBalance;\\n        if (tokenBalanceDiff > 0) {\\n            token.transfer(recipient, tokenBalanceDiff);\\n        }\\n    }\\n\\n    function onInstall(bytes calldata data) external override {}\\n\\n    function onUninstall(bytes calldata data) external override {}\\n\\n    function isModuleType(uint256 typeID) external view override returns (bool) {\\n        return true;\\n    }\\n\\n    function getModuleTypes() public view override returns (uint256) {\\n        return 2;\\n    }\\n}\\n\",\"keccak256\":\"0x58f01f6dcb3a1fe30586aec287cc2d94bb6fb8f7508611a91a94937b8484a7b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105d9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630db1055e1461005c5780636d61fe70146100855780638a91b0e314610085578063d6cc1aa414610099578063ecd05961146100a8575b600080fd5b61006f61006a366004610356565b6100cc565b60405161007c91906103ec565b60405180910390f35b610097610093366004610432565b5050565b005b6040516002815260200161007c565b6100bc6100b63660046104a3565b50600190565b604051901515815260200161007c565b60606000836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016100fc91906104bc565b602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d91906104d0565b9050846001600160401b03811115610157576101576104e9565b604051908082528060200260200182016040528015610180578160200160208202803683370190505b50915060005b8581101561023c578686828181106101a0576101a06104ff565b90506020020160208101906101b59190610515565b6001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101ef57600080fd5b505af1925050508015610200575060015b1561022a576001838281518110610219576102196104ff565b911515602092830291909101909101525b806102348161054f565b915050610186565b50600081856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161026c91906104bc565b602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad91906104d0565b6102b79190610568565b905080156103345760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905286169063a9059cbb906044016020604051808303816000875af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610581565b505b5050949350505050565b6001600160a01b038116811461035357600080fd5b50565b6000806000806060858703121561036c57600080fd5b84356001600160401b038082111561038357600080fd5b818701915087601f83011261039757600080fd5b8135818111156103a657600080fd5b8860208260051b85010111156103bb57600080fd5b602092830196509450508501356103d18161033e565b915060408501356103e18161033e565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015610426578351151583529284019291840191600101610408565b50909695505050505050565b6000806020838503121561044557600080fd5b82356001600160401b038082111561045c57600080fd5b818501915085601f83011261047057600080fd5b81358181111561047f57600080fd5b86602082850101111561049157600080fd5b60209290920196919550909350505050565b6000602082840312156104b557600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000602082840312156104e257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561052757600080fd5b81356105328161033e565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161056157610561610539565b5060010190565b8181038181111561057b5761057b610539565b92915050565b60006020828403121561059357600080fd5b8151801515811461053257600080fdfea2646970667358221220437015d73db0f805829cc2f1b4cf5a6a7c4bc8b44f640d0f9f6c29c784430b3c64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630db1055e1461005c5780636d61fe70146100855780638a91b0e314610085578063d6cc1aa414610099578063ecd05961146100a8575b600080fd5b61006f61006a366004610356565b6100cc565b60405161007c91906103ec565b60405180910390f35b610097610093366004610432565b5050565b005b6040516002815260200161007c565b6100bc6100b63660046104a3565b50600190565b604051901515815260200161007c565b60606000836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016100fc91906104bc565b602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d91906104d0565b9050846001600160401b03811115610157576101576104e9565b604051908082528060200260200182016040528015610180578160200160208202803683370190505b50915060005b8581101561023c578686828181106101a0576101a06104ff565b90506020020160208101906101b59190610515565b6001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101ef57600080fd5b505af1925050508015610200575060015b1561022a576001838281518110610219576102196104ff565b911515602092830291909101909101525b806102348161054f565b915050610186565b50600081856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161026c91906104bc565b602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad91906104d0565b6102b79190610568565b905080156103345760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905286169063a9059cbb906044016020604051808303816000875af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103329190610581565b505b5050949350505050565b6001600160a01b038116811461035357600080fd5b50565b6000806000806060858703121561036c57600080fd5b84356001600160401b038082111561038357600080fd5b818701915087601f83011261039757600080fd5b8135818111156103a657600080fd5b8860208260051b85010111156103bb57600080fd5b602092830196509450508501356103d18161033e565b915060408501356103e18161033e565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015610426578351151583529284019291840191600101610408565b50909695505050505050565b6000806020838503121561044557600080fd5b82356001600160401b038082111561045c57600080fd5b818501915085601f83011261047057600080fd5b81358181111561047f57600080fd5b86602082850101111561049157600080fd5b60209290920196919550909350505050565b6000602082840312156104b557600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000602082840312156104e257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561052757600080fd5b81356105328161033e565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161056157610561610539565b5060010190565b8181038181111561057b5761057b610539565b92915050565b60006020828403121561059357600080fd5b8151801515811461053257600080fdfea2646970667358221220437015d73db0f805829cc2f1b4cf5a6a7c4bc8b44f640d0f9f6c29c784430b3c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getModuleTypes()": {
        "details": "Returns bit-encoded integer of the different typeIds of the module MUST return all the bit-encoded typeIds of the module"
      },
      "isModuleType(uint256)": {
        "details": "Returns boolean value if module is a certain type",
        "params": {
          "typeID": "the module type ID according the ERC-7579 spec MUST return true if the module is of the given type and false otherwise"
        }
      },
      "onInstall(bytes)": {
        "details": "This function is called by the smart account during installation of the module",
        "params": {
          "data": "arbitrary data that may be required on the module during `onInstall` initialization MUST revert on error (i.e. if module is already enabled)"
        }
      },
      "onUninstall(bytes)": {
        "details": "This function is called by the smart account during uninstallation of the module",
        "params": {
          "data": "arbitrary data that may be required on the module during `onUninstall` de-initialization MUST revert on error"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}